===================== Storm: WordCountTopology.java

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.umd.assignment;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.PriorityQueue;
import java.util.Set;

import org.umd.assignment.spout.RandomSentenceSpout;
import org.umd.assignment.spout.TwitterSampleSpout;

import backtype.storm.Config;
import backtype.storm.LocalCluster;
import backtype.storm.StormSubmitter;
import backtype.storm.task.ShellBolt;
import backtype.storm.topology.BasicOutputCollector;
import backtype.storm.topology.IRichBolt;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.TopologyBuilder;
import backtype.storm.topology.base.BaseBasicBolt;
import backtype.storm.tuple.Fields;
import backtype.storm.tuple.Tuple;
import backtype.storm.tuple.Values;

/**
 * This topology demonstrates Storm's stream groupings and multilang
 * capabilities.
 */
public class WordCountTopology {
  public static class SplitSentence extends ShellBolt implements IRichBolt {

    public SplitSentence() {
      super("python", "splitsentence.py");
    }

    @Override
    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields("word"));
    }

    @Override
    public Map<String, Object> getComponentConfiguration() {
      return null;
    }
  }

  public static class WordCount<K, V> extends BaseBasicBolt {
    Map<String, Integer> counts = new HashMap<String, Integer>();

    @Override
    public void execute(Tuple tuple, BasicOutputCollector collector) {

      // ----------------- Task 2 ---------------------------------
      //
      // Modify this code to exclude stop-words from counting.
      // Stopword list is provided in the lab folder.
      //
      // ---------------------------------------------------------

      Set<String> stopWords = new LinkedHashSet<String>();

      try {
        BufferedReader SW = new BufferedReader(
            new FileReader("../Stopwords.txt"));
        for (String line; (line = SW.readLine()) != null;)
          stopWords.add(line.trim());
        SW.close();
      } catch (Exception e) {
        e.printStackTrace();
      }

      String word = tuple.getString(0).toLowerCase();

      if (!stopWords.contains(word) && !word.contains("obama")) {
        Integer count = counts.get(word);
        if (count == null)
          count = 0;
        count++;
        counts.put(word, count);
        collector.emit(new Values(word, count));
      }
    }

    @Override
    public void cleanup() {
      // ------------------------ Task 3 ---------------------------------------
      //
      // This function gets called when the Stream processing finishes.
      // MODIFY this function to print the most frequent words that co-occur
      // with Obama [The TwitterSimpleSpout already gives you Tweets that contain
      // the word obama].
      //
      // Since multiple threads will be doing the same cleanup operation, writing the
      // output to a file might not work as desired. One way to do this would be
      // print the output (using System.out.println) and do a grep/awk/sed on that.
      // For a simple example see inside the runStorm.sh.
      //
      // --------------------------------------------------------------------------

      List<Entry<String, Integer>> greatest = findGreatest(counts, 10);
      
      for (Entry<String, Integer> word : greatest) {
        System.out.println("TOP " + word.getKey() + ": " + word.getValue());
      }

    }

    private static <K, V extends Comparable<? super V>> List<Entry<K, V>> findGreatest(
        Map<K, V> map, int n) {

      Comparator<? super Entry<K, V>> comparator = new Comparator<Entry<K, V>>() {
        @Override
        public int compare(Entry<K, V> e0, Entry<K, V> e1) {
          V v0 = e0.getValue();
          V v1 = e1.getValue();
          return v0.compareTo(v1);
        }
      };

      PriorityQueue<Entry<K, V>> highest = new PriorityQueue<Entry<K, V>>(
          n, comparator);
      for (Entry<K, V> entry : map.entrySet()) {
        highest.offer(entry);
        while (highest.size() > n) {
          highest.poll();
        }
      }

      List<Entry<K, V>> result = new ArrayList<Map.Entry<K, V>>();
      while (highest.size() > 0) {
        result.add(highest.poll());
      }

      return result;
    }

    @Override
    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields("word", "count"));
    }
  }

  public static void main(String[] args) throws Exception {

    TopologyBuilder builder = new TopologyBuilder();

    // ---------------------------- Task 1 -------------------------------------
    //
    // You need to use TwitterSampleSpout() for the assignment. But, it won't work
    // unless you set up the access token correctly in the TwitterSampleSpout.java
    //
    // RandomSentenceSpout() simply spits out a random sentence.
    //
    // --------------------------------------------------------------------------

    // Setting up a spout
    builder.setSpout("spout", new TwitterSampleSpout(), 3);

    // Setting up bolts
    builder.setBolt("split", new SplitSentence(), 3).shuffleGrouping(
        "spout");
    builder.setBolt("count", new WordCount<String, Integer>(), 3).fieldsGrouping("split",
        new Fields("word"));

    Config conf = new Config();
    conf.setDebug(true);

    if (args != null && args.length > 0) {
      conf.setNumWorkers(3);
      StormSubmitter.submitTopologyWithProgressBar(args[0], conf, builder.createTopology());
    } else {
      conf.setMaxTaskParallelism(3);

      LocalCluster cluster = new LocalCluster();
      cluster.submitTopology("word-count", conf, builder.createTopology());

      // --------------------------- Task 4 ---------------------------------
      //
      // The sleep time simply indicates for how long you want to keep your
      // system up and running. 10000 (miliseconds) here means 10 seconds.
      //
      // ----------------------------------------------------------------------

      Thread.sleep(1000 * 60 * 10);

      cluster.shutdown(); // blot "cleanup" function is called when
                // cluster is shutdown (only works in local
                // mode)
    }
  }
}


===================== Storm: TwitterSampleSpout.java

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.umd.assignment.spout;

import java.util.Map;
import java.util.concurrent.LinkedBlockingQueue;

import twitter4j.FilterQuery;
import twitter4j.StallWarning;
import twitter4j.Status;
import twitter4j.StatusDeletionNotice;
import twitter4j.StatusListener;
import twitter4j.TwitterStream;
import twitter4j.TwitterStreamFactory;
import twitter4j.auth.AccessToken;
import twitter4j.conf.ConfigurationBuilder;

import backtype.storm.Config;
import backtype.storm.spout.SpoutOutputCollector;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseRichSpout;
import backtype.storm.tuple.Fields;
import backtype.storm.tuple.Values;
import backtype.storm.utils.Utils;

@SuppressWarnings("serial")
public class TwitterSampleSpout extends BaseRichSpout {

  SpoutOutputCollector _collector;
  LinkedBlockingQueue<String> queue = null;
  TwitterStream _twitterStream;
  String consumerKey;
  String consumerSecret;
  String accessToken;
  String accessTokenSecret;
  String[] keyWords;
  
  public TwitterSampleSpout(String consumerKey, String consumerSecret,
      String accessToken, String accessTokenSecret, String[] keyWords) {
    this.consumerKey = consumerKey;
    this.consumerSecret = consumerSecret;
    this.accessToken = accessToken;
    this.accessTokenSecret = accessTokenSecret;
    this.keyWords = keyWords;
  }


  //----------------------- Task 0 -----------------------------------------
  //
  //  Use the following link (for visual help) to create a Twitter App for yourselves. In summary,
  //  the steps are:
  //        (a) Go to apps.twitter.com
  //        (b) Create an App [Put any website as an URL]
  //        (c) Go to "keys and Access Token tab"
  //        (d) Create you access token
  //        (e) Copy over the ConsumerKey, consumerSecret, accesstoken, and accessTokenSecret
  //        in the TwitterSampleSpout()
  //
  //  https://dev.twitter.com/oauth/overview/application-owner-access-tokens
  //  
  //------------------------------------------------------------------------

  public TwitterSampleSpout() {   
    this.consumerKey = "C0PRjUbKOHaF0xp4NVfdMMJUe";
    this.consumerSecret = "EjzUyYmZ7oBguADRqm5r2W1lI2grM4YZiVYcyTbmh2ZvnNE1K9";
    this.accessToken = "2588753791-H8IxYCbhGZJQ6aI9zLGCzNGZh700fGLEfiVpGQt";
    this.accessTokenSecret = "iz8J02XBBQQb1mHYxz08SWG82n4zwuqYNEdXbuEMIsOeB";
    this.keyWords = new String[1];
    this.keyWords[0] = "obama"; /* Filters All Tweets with word Obama */
  }

  @Override
  public void open(Map conf, TopologyContext context,
      SpoutOutputCollector collector) {
    queue = new LinkedBlockingQueue<String>(1000);
    _collector = collector;

    StatusListener listener = new StatusListener() {

      @Override
      public void onStatus(Status status) {
        queue.offer(status.getText());
      }

      @Override
      public void onDeletionNotice(StatusDeletionNotice sdn) {
      }

      @Override
      public void onTrackLimitationNotice(int i) {
      }

      @Override
      public void onScrubGeo(long l, long l1) {
      }

      @Override
      public void onException(Exception ex) {
      }

      @Override
      public void onStallWarning(StallWarning arg0) {
      }

    };

    TwitterStreamFactory fact = new TwitterStreamFactory(
        new ConfigurationBuilder().setJSONStoreEnabled(true).build());

    _twitterStream = fact.getInstance();

    _twitterStream.addListener(listener);
    _twitterStream.setOAuthConsumer(consumerKey, consumerSecret);
    
    AccessToken token = new AccessToken(accessToken, accessTokenSecret);
    _twitterStream.setOAuthAccessToken(token);
    
    if (keyWords.length == 0) {
      _twitterStream.sample();
    } else {
      FilterQuery query = new FilterQuery().track(keyWords);
      _twitterStream.filter(query);
    }

  }

  @Override
  public void nextTuple() {
    String ret = queue.poll();
    if (ret == null) {
      Utils.sleep(50);
    } else {
         
      _collector.emit(new Values(ret));

    }
  }

  @Override
  public void close() {
    _twitterStream.shutdown();
  }

  @Override
  public Map<String, Object> getComponentConfiguration() {
    Config ret = new Config();
    ret.setMaxTaskParallelism(1);
    return ret;
  }

  @Override
  public void ack(Object id) {
  }

  @Override
  public void fail(Object id) {
  }

  @Override
  public void declareOutputFields(OutputFieldsDeclarer declarer) {
    declarer.declare(new Fields("tweet"));
  }

}

===================== Storm: Execution Output for a Sample Run

abuse: 476
backer: 474
barack: 449
case:: 398
co-founder: 370
president: 490
prominent: 400
rt: 432
sex: 463
supporter: 400

===================== Spark: Assignment.java

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import scala.Tuple2;

import com.google.common.collect.Lists;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.api.java.StorageLevels;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;

import java.util.regex.Pattern;

public final class Assignment {
    private static final Pattern SPACE = Pattern.compile(" ");

    public static void main(String[] args) {

        // Create the context with a 10 second batch size
        SparkConf sparkConf = new SparkConf().setAppName("Assignment");
        JavaStreamingContext ssc = new JavaStreamingContext(sparkConf,
                new Duration(10000));

        // Create a JavaReceiverInputDStream on target ip:port and count the
        // words in input stream of \n delimited text (eg. generated by 'nc')
        // Note that no duplication in storage level only for running locally.
        // Replication necessary in distributed scenario for fault tolerance.
        JavaReceiverInputDStream<String> lines = ssc.socketTextStream(
                "localhost", Integer.parseInt("9999"),
                StorageLevels.MEMORY_AND_DISK_SER);

        JavaDStream<String> words = lines
                .flatMap(new FlatMapFunction<String, String>() {
                    @Override
                    public Iterable<String> call(String x) {
                        return Lists.newArrayList(SPACE.split(x));
                    }
                });

        JavaPairDStream<String, Integer> wordCounts = words
                .filter(new Function<String, Boolean>() {
                    public Boolean call(String s) {
                        return s.toLowerCase().contains("#obama");
                    }
                }).mapToPair(new PairFunction<String, String, Integer>() {
                    @Override
                    public Tuple2<String, Integer> call(String s) {
                        return new Tuple2<String, Integer>(s, 1);
                    }
                });

        // Reduce function adding two integers, defined separately for clarity
        Function2<Integer, Integer, Integer> reduceFunc = new Function2<Integer, Integer, Integer>() {
            @Override
            public Integer call(Integer i1, Integer i2) throws Exception {
                return i1 + i2;
            }
        };

        // Reduce last 30 seconds of data, every 10 seconds
        JavaPairDStream<String, Integer> windowedWordCounts = wordCounts
                .reduceByKeyAndWindow(reduceFunc, new Duration(30000),
                        new Duration(10000));

        windowedWordCounts.print();

        ssc.start();

        ssc.awaitTermination();
    }
}

===================== Spark: Execution Output for a Sample Run

-------------------------------------------
Time: 1416766930000 ms
-------------------------------------------

-------------------------------------------
Time: 1416766940000 ms
-------------------------------------------
(#Obama,3)

-------------------------------------------
Time: 1416766950000 ms
-------------------------------------------
(#Obama,6)

-------------------------------------------
Time: 1416766960000 ms
-------------------------------------------
(#Obama,9)

-------------------------------------------
Time: 1416766970000 ms
-------------------------------------------
(#Obama,6)

-------------------------------------------
Time: 1416766980000 ms
-------------------------------------------
(#Obama,3)

-------------------------------------------
Time: 1416766990000 ms
-------------------------------------------
